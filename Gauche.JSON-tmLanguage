{ "name": "Gauche",
  "scopeName": "source.gauche",
  "fileTypes": ["scm"],
  "patterns": [
    {   "name": "comment.line.semicolon.gauche",
        "comment": "comment",
        "match": ";.*$\\n?"
    },
    {   "name": "comment.block.gauche",
        "comment": "block comment",
        "begin": "\\#\\|",
        "patterns": [
            { "include": "$self" }
        ],
        "end": "\\|\\#"
    },
    {   "name": "meta.character.gauche",
        "comment": "reader syntax",
        "match": "(?<=(\\(|\\s|\\)))(\\#\\,)\\(",
        "captures": {
            "2": { "name": "comment.character.gauche" }
        }
    },
    {   "name": "meta.language.gauche",
        "comment": "#f, #t",
        "match": "(?<=(\\(|\\s|\\)))((\\s*(#(f|t)))*)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "constant.language.gauche" }
        }
    },
    {   "name": "meta.numeric.gauche",
        "comment": "number",
        "match": "(?<=(\\(|\\s|\\)))((\\s*(\\d+|#(e|i|b|o|d|x)\\d+))*)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "constant.numeric.gauche" }
        }
    },
    {   "name": "string.quoted.double.gauche",
        "comment": "string",
        "begin": "\"",
        "end": "\"",
        "patterns": [
            {   "name": "constant.character.escape.gauche",
                "match": "\\\\."
            }
        ]
    },
    {   "name": "meta.variable.gauche",
        "comment": "gloval variable",
        "match": "(?<=(\\(|\\s|\\)))((\\s*(\\*[\\w!$%&*+-./:<=>?@^_~]+\\*))*)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "variable.other.gauche" }
        }
    },
    {   "name": "meta.variable.gauche",
        "comment": "key (knowingly, it should be constant.language.gauche)",
        "match": "(?<=(\\(|\\s|\\)))(:[\\w!$%&*+-./:<=>?@^_~]+)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "variable.parameter.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "(define|define-foo (name ) )",
        "match": "(?<=(\\(|\\s))(define(|-[\\w!$%&*+-./:<=>?@^_~]+))\\s*\\(\\s*([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\(|\\))",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "4": { "name": "entity.name.function.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "(define|define-foo name )",
        "match": "(?<=(\\(|\\s))(define(|-[\\w!$%&*+-./:<=>?@^_~]+))\\s([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "4": { "name": "entity.name.function.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "named let",
        "match": "(?<=(\\(|\\s))(let)\\s+([\\w!$%&*+-./:<=>?@^_~]+)",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "3": { "name": "entity.name.function.gauche" }
        }
    },
    {   "name": "meta.operator.gauche",
        "comment": "keyword with name",
        "match": "(?<=(\\(|\\s))(use|select-module)\\s([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\(|\\))",
        "captures": {
            "2": { "name": "keyword.operator.gauche" },
            "3": { "name": "entity.name.function.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define syntax",
        "match": "(?<=(\\(|\\s))((define|let(|rec))-syntax|syntax-rules)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define|define-foo",
        "match": "(?<=(\\(|\\s))(define(|-[\\w!$%&*+-./:<=>?@^_~]+))(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "lambda",
        "match": "(?<=(\\(|\\s))(lambda|\\^(|[_a-z])|\\$|cut(|e)|case-lambda)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "binding (let)",
        "match": "(?<=(\\(|\\s))(let(|\\*|1)(|-[\\w!$%&*+-./:<=>?@^_~]+)|[\\w!$%&*+-./:<=>?@^_~]+-let(|\\*|1)|let(/cc|rec)|rlet1)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "binding",
        "match": "(?<=(\\(|\\s))(rec|receive|parameterize|get-optional)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "iterator",
        "match": "(?<=(\\(|\\s))(do(|list|times)|while|until)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "match lambda",
        "match": "(?<=(\\(|\\s))(match-(define|lambda(|\\*)|let(|\\*|1|rec)))(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.control.gauche",
        "comment": "control",
        "match": "(?<=(\\(|\\s))(if|cond(|-expand|-list)|else|case|and|or|when|unless|begin(|0)|dynamic-wind|guard|unwind-protect|match|rxmatch-(case|cond|if)|raise|error(|f))(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.control.gauche" }
        }
    },
    {   "name": "meta.operator.gauche",
        "comment": "misc keywords",
        "match": "(?<=(\\(|\\s))(shift|reset|force|delay|lazy|eager|values|eval|apply|filter|(|hash-table-)(map|for-each)|export(|-all)|import|use|extend|select-module)(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.operator.gauche" }
        }
    },
    {   "name": "meta.operator.gauche",
        "comment": "call-with-*",
        "match": "(?<=(\\(|\\s))(call/[cp]c|call-with-[\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.operator.gauche" }
        }
    }
  ],
  "uuid": "b5925227-2a05-405b-8793-3fd13033a25e"
}