{ "name": "Gauche",
  "scopeName": "source.gauche",
  "fileTypes": ["scm"],
  "patterns": [
    {   "name": "comment.line.semicolon.gauche",
        "comment": "comment",
        "match": ";.*$\\n?"
    },
    {   "name": "meta.character.gauche",
        "comment": "reader syntax",
        "match": "(?<=(\\(|\\s|\\)))(\\#\\,)\\(",
        "captures": {
            "2": { "name": "comment.character.gauche" }
        }
    },
    {   "name": "meta.language.gauche",
        "comment": "#f, #t",
        "match": "(?<=(\\(|\\s|\\)))((\\s*(#(f|t)))*)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "constant.language.gauche" }
        }
    },
    {   "name": "meta.numeric.gauche",
        "comment": "number",
        "match": "(?<=(\\(|\\s|\\)))((\\s*(\\d+|#(e|i|b|o|d|x)\\d+))*)(\\(|\\s|\\))",
        "captures": {
            "2": { "name": "constant.numeric.gauche" }
        }
    },
    {   "name": "string.quoted.double.gauche",
        "comment": "string",
        "begin": "\"",
        "end": "\"",
        "patterns": [
            {   "name": "constant.character.escape.gauche",
                "match": "\\."
            }
        ]
    },
    {   "name": "meta.illegal.gauche",
        "comment": "signal exception",
        "match": "(?<=(\\(|\\s))(raise|error(|f))(\\s|\\()",
        "captures": {
            "2": { "name": "invalid.illegal.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define with name",
        "match": "(?<=(\\(|\\s))(define(|-syntax|-constant|-in-module|-record-type))\\s([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "4": { "name": "entity.name.function.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define with (name)",
        "match": "(?<=(\\(|\\s))(define(|-constant|-in-module))\\s*\\(\\s*([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "4": { "name": "entity.name.function.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define with name, super",
        "match": "(?<=(\\(|\\s))(define-condition-type)\\s([\\w!$%&*+-./:<=>?@^_~]+)\\s([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "3": { "name": "entity.name.function.gauche"},
            "4": { "name": "entity.other.inherited-class.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define with (name, super)",
        "match": "(?<=(\\(|\\s))(define-record-type)\\s*\\(\\s*([\\w!$%&*+-./:<=>?@^_~]+)\\s([\\w!$%&*+-./:<=>?@^_~]+)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "3": { "name": "entity.name.function.gauche"},
            "4": { "name": "entity.other.inherited-class.gauche"}
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "named let",
        "match": "(?<=(\\(|\\s))(let)\\s+([\\w!$%&*+-./:<=>?@^_~]+)",
        "captures": {
            "2": { "name": "support.function.gauche" },
            "3": { "name": "entity.name.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define syntax",
        "match": "(?<=(\\(|\\s))((define|let(|rec))-syntax|syntax-rules)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "define-*",
        "match": "(?<=(\\(|\\s))(define-(condition-type|constant|in-module|values|reader-ctor|record-type))(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "lambda",
        "match": "(?<=(\\(|\\s))(define|lambda|\\^(|[_a-z])|\\$|cut(|e)|case-lambda)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "binding",
        "match": "(?<=(\\(|\\s))(let(|\\*(|-values)|rec|1|/cc)|let-(args|values|optionals\\*|keywords(|\\*))|and-let\\*|(fluid|rxmatch)-let|(if-|r)let1|rec|receive|parameterize|get-optional)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "iterator",
        "match": "(?<=(\\(|\\s))(do(|list|times)|while|until)(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.function.gauche",
        "comment": "match lambda",
        "match": "(?<=(\\(|\\s))(match-(define|lambda(|\\*)|let(|\\*|1|rec)))(\\s|\\()",
        "captures": {
            "2": { "name": "support.function.gauche" }
        }
    },
    {   "name": "meta.control.gauche",
        "comment": "control",
        "match": "(?<=(\\(|\\s))(if|cond(|-expand|-list)|else|case|and|or|when|unless|begin(|0)|dynamic-wind|guard|unwind-protect|match|rxmatch-(case|cond|if))(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.control.gauche" }
        }
    },
    {   "name": "meta.operator.gauche",
        "comment": "misc keywords",
        "match": "(?<=(\\(|\\s))(shift|reset|force|delay|lazy|eager|values|eval|apply|(|hash-table-)(map|for-each))(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.operator.gauche" }
        }
    },
    {   "name": "meta.operator.gauche",
        "comment": "call-with-*",
        "match": "(?<=(\\(|\\s))(call/[cp]c|call-with-(builder|cgi-script|client-socket|current-continuation|ftp-connection|(input|output)-(conversion|file|process|string)|iterators?|process-io|string-io|values))(\\s|\\()",
        "captures": {
            "2": { "name": "keyword.operator.gauche" }
        }
    }
  ],
  "uuid": "b5925227-2a05-405b-8793-3fd13033a25e"
}